package main

var mapping = map[string]string{
	"USER-SUPPLIED VALUES": "",
	"existingSecret":       "apiKeySecret",
	"nodeSelector":         "components.komodorAgent.nodeSelector",
	"supervisor.enabled":   "capabilities.supervisor",
	"enableRWCache":        "capabilities.events.enableRWCache",

	"watcher.actions.basic":       "capabilities.actions.basic",
	"watcher.actions.advanced":    "capabilities.actions.advanced",
	"watcher.actions.podExec":     "",
	"watcher.actions.portforward": "",
	"watcher.allowReadingPodLogs": "capabilities.logs.enabled",
	"watcher.clusterName":         "clusterName",
	"watcher.collectHistory":      "",
	"watcher.collectHistoryFrom":  "",

	"watcher.enableAgentTaskExecution":   "",
	"watcher.enableAgentTaskExecutionV2": "",
	"watcher.enableHelm":                 "capabilities.helm",
	"watcher.daemon.varsConfigMapName":   "",
	"watcher.metrics.varsConfigMapName":  "",
	"watcher.servers.healthCheck":        "",
	"watcher.watchNamespace":             "capabilities.events.watchNamespace",
	"watcher.namespacesDenylist":         "capabilities.events.namespacesDenylist",
	"watcher.logsNamespacesDenylist":     "capabilities.logs.logsNamespacesDenylist",
	"watcher.logsNamespacesAllowlist":    "capabilities.logs.logsNamespacesAllowlist",
	"watcher.nameDenylist":               "capabilities.logs.nameDenylist",
	"watcher.redact":                     "capabilities.events.redact",
	"watcher.redactLogs":                 "capabilities.logs.redact",

	"watcher.memoryThresholdSafetyCheck.enable": "",
	"watcher.networkMapper.enable":              "capabilities.networkMapper",
	"watcher.monitoringFQDN":                    "",
	"watcher.tasksServerHost":                   "communications.tasksServerHost",
	"watcher.serverHost":                        "communications.serverHost",
	"watcher.wsHost":                            "communications.wsHost",

	"watcher.telemetry.collectApiServerMetrics": "capabilities.debug.collectApiServerMetrics",
	"watcher.telemetry.enable":                  "",
	"watcher.telemetry.serverHost":              "communications.telemetryServerHost",

	"metrics.enabled":    "capabilities.metrics",
	"helm.enableActions": "",

	"watcher.resources.admissionRegistrationResources":         "allowedResources.admissionRegistrationResources",
	"watcher.resources.allowReadAll":                           "allowedResources.allowReadAll",
	"watcher.resources.argoWorkflows.clusterWorkflowTemplates": "allowedResources.argoWorkflows.clusterWorkflowTemplates",
	"watcher.resources.argoWorkflows.cronWorkflows":            "allowedResources.argoWorkflows.cronWorkflows",
	"watcher.resources.argoWorkflows.workflowTemplates":        "allowedResources.argoWorkflows.workflowTemplates",
	"watcher.resources.argoWorkflows.workflows":                "allowedResources.argoWorkflows.workflows",
	"watcher.resources.authorizationResources":                 "allowedResources.authorizationResources",
	"watcher.resources.certificateSigningRequest":              "allowedResources.certificateSigningRequest",
	"watcher.resources.clusterRole":                            "allowedResources.clusterRole",
	"watcher.resources.clusterRoleBinding":                     "allowedResources.clusterRoleBinding",
	"watcher.resources.configMap":                              "allowedResources.configMap",
	"watcher.resources.controllerRevision":                     "allowedResources.controllerRevision",
	"watcher.resources.cronjob":                                "allowedResources.cronjob",
	"watcher.resources.csiDriver":                              "allowedResources.csiDriver",
	"watcher.resources.csiNode":                                "allowedResources.csiNode",
	"watcher.resources.csiStorageCapacity":                     "allowedResources.csiStorageCapacity",
	"watcher.resources.customReadAPIGroups":                    "allowedResources.customReadAPIGroups",
	"watcher.resources.daemonSet":                              "allowedResources.daemonSet",
	"watcher.resources.deployment":                             "allowedResources.deployment",
	"watcher.resources.endpointSlice":                          "allowedResources.endpointSlice",
	"watcher.resources.endpoints":                              "allowedResources.endpoints",
	"watcher.resources.event":                                  "allowedResources.event",
	"watcher.resources.flowControlResources":                   "allowedResources.flowControlResources",
	"watcher.resources.horizontalPodAutoscaler":                "allowedResources.horizontalPodAutoscaler",
	"watcher.resources.ingress":                                "allowedResources.ingress",
	"watcher.resources.ingressClass":                           "allowedResources.ingressClass",
	"watcher.resources.job":                                    "allowedResources.job",
	"watcher.resources.lease":                                  "allowedResources.lease",
	"watcher.resources.limitRange":                             "allowedResources.limitRange",
	"watcher.resources.metrics":                                "allowedResources.metrics",
	"watcher.resources.namespace":                              "allowedResources.namespace",
	"watcher.resources.networkPolicy":                          "allowedResources.networkPolicy",
	"watcher.resources.node":                                   "allowedResources.node",
	"watcher.resources.persistentVolume":                       "allowedResources.persistentVolume",
	"watcher.resources.persistentVolumeClaim":                  "allowedResources.persistentVolumeClaim",
	"watcher.resources.pod":                                    "allowedResources.pod",
	"watcher.resources.podTemplate":                            "allowedResources.podTemplate",
	"watcher.resources.policyResources":                        "allowedResources.policyResources",
	"watcher.resources.priorityClass":                          "allowedResources.priorityClass",
	"watcher.resources.replicaSet":                             "allowedResources.replicaSet",
	"watcher.resources.replicationController":                  "allowedResources.replicationController",
	"watcher.resources.resourceQuota":                          "allowedResources.resourceQuota",
	"watcher.resources.role":                                   "allowedResources.role",
	"watcher.resources.roleBinding":                            "allowedResources.roleBinding",
	"watcher.resources.rollout":                                "allowedResources.rollout",
	"watcher.resources.runtimeClass":                           "allowedResources.runtimeClass",
	"watcher.resources.secret":                                 "allowedResources.secret",
	"watcher.resources.service":                                "allowedResources.service",
	"watcher.resources.serviceAccount":                         "allowedResources.serviceAccount",
	"watcher.resources.statefulSet":                            "allowedResources.statefulSet",
	"watcher.resources.storageClass":                           "allowedResources.storageClass",
	"watcher.resources.volumeAttachment":                       "allowedResources.volumeAttachment",

	"watcher.actions.enableAgentTaskExecutionV2": "",
	"watcher.controller.resync.period":           "",
	"watcher.daemon.clusterName":                 "",
	"watcher.enableActions":                      "",
	"watcher.kialiApiKey":                        "",
	"watcher.nameBlacklist":                      "",
	"watcher.namespacesBlacklist":                "",
}

var deprecatedKeys = map[string]string{
	"watcher.namespacesBlacklist": "capabilities.events.namespacesDenylist",
}
