# ReplicaCount should always be 1 - We do not properly support syncing state (yet) so it will cause the same events to be sent and overload the server.
replicaCount: 1
image:
  repository: public.ecr.aws/komodor-public/k8s-watcher
  pullPolicy: IfNotPresent

# Preferred over Helm .Release.Namespace for backwards compatibility, if set.
#namespace: komodor
createNamespace: true

# enableMemLimitChecks will use downward API to tell the pod what is the allocated memory
# when the allocated memory is almost full the agent will stop receiving new events
# the process resumes once there is free memory to use
enableMemLimitChecks: true

serviceAccount:
  # Specifies whether a service account should be created
  create: true
  # The name of the service account to use.
  # If not set and create is true, a name is generated using the fullname template
  # name: ""

enableRWCache: true

proxy:
  enabled: false
  komodorOnly: true
  http: ""
  https: ""
  no_proxy: ""

resources:
  limits:
    cpu: 2
    memory: 8Gi
  requests:
    cpu: 0.25
    memory: 256Mi

deploymentAnnotations: {}
podAnnotations: {}

existingSecret: ""

apiKey: ""
nodeSelector: {}

helm:
  enableActions: true
  volumeSizeLimit: "256Mi"

supervisor:
  enabled: false
  image:
    repository: public.ecr.aws/komodor-public/supervisor
    pullPolicy: IfNotPresent
  resources:
    requests:
      cpu: 0.1
      memory: 256Mi
  servers:
    healthCheck:
      port: 8089
metrics:
  enabled: false
daemon:
  tolerations:
    - operator: "Exists"
  resources:
    limits:
      cpu: 1
      memory: 2Gi
    requests:
      cpu: 0.1
      memory: 256Mi
  image:
    repository: public.ecr.aws/komodor-public/telegraf:1.26
    pullPolicy: IfNotPresent
  init:
    image:
      repository: public.ecr.aws/komodor-public/init-daemon-agent
      pullPolicy: IfNotPresent
watcher:
  # clusterName: ""
  enableAgentTaskExecution: true
  enableAgentTaskExecutionV2: true
  allowReadingPodLogs: true
  enableHelm: true
  daemon:
    varsConfigMapName: k8s-watcher-daemon-env-vars
  servers:
    healthCheck: {}
  collectHistory: true
  watchNamespace: all
  namespacesDenylist: []
  logsNamespacesDenylist: []
  nameDenylist: []
  redact: []
  redactLogs: []
  actions:
    basic: false
    advanced: false
    podExec: false
    portforward: false
  telemetry:
    enable: true
    collectApiServerMetrics: false
  memoryThresholdSafetyCheck:
    enable: true
  networkMapper:
    enable: false
  monitoringFQDN: ""
  resources:
    event: true
    deployment: true
    replicationController: true
    replicaSet: true
    daemonSet: true
    statefulSet: true
    service: true
    pod: true
    job: true
    cronjob: true
    node: true
    clusterRole: true
    serviceAccount: true
    persistentVolume: true
    persistentVolumeClaim: true
    namespace: true
    secret: false
    configMap: true
    ingress: true
    endpoints: true
    storageClass: true
    rollout: true
    metrics: true
    limitRange: true
    podTemplate: true
    resourceQuota: true
    admissionRegistrationResources: true
    controllerRevision: true
    authorizationResources: true
    horizontalPodAutoscaler: true
    certificateSigningRequest: true
    lease: true
    endpointSlice: true
    flowControlResources: true
    ingressClass: true
    networkPolicy: true
    runtimeClass: true
    policyResources: true
    clusterRoleBinding: true
    roleBinding: true
    role: true
    priorityClass: true
    csiDriver: true
    csiNode: true
    csiStorageCapacity: true
    volumeAttachment: true
    allowReadAll: true
    customReadAPIGroups: []
  controller:
    resync:
      period: "0"
