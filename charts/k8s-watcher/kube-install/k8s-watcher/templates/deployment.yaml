apiVersion: apps/v1
kind: Deployment
metadata:
  name: k8s-watcher
  namespace: komodor
  labels:
    helm.sh/chart: k8s-watcher-1.18.5
    app.kubernetes.io/name: k8s-watcher
    app.kubernetes.io/instance: k8s-watcher
    app.kubernetes.io/version: "0.2.72"
    app.kubernetes.io/managed-by: Helm
spec:
  replicas: 1
  strategy:
    rollingUpdate:
      maxUnavailable: 0
      maxSurge: 1
  selector:
    matchLabels:
      app.kubernetes.io/name: k8s-watcher
      app.kubernetes.io/instance: k8s-watcher
  template:
    metadata:
      annotations:
        checksum/config: e21412debbf4b4eb5e6223f6722353300b1be46421b605495c724df10258c48d
      labels:
        app.kubernetes.io/name: k8s-watcher
        app.kubernetes.io/instance: k8s-watcher
    spec:
      priorityClassName: k8s-watcher-agent-high-priority
      serviceAccountName: k8s-watcher
      containers:        
        - name: metrics
          image: public.ecr.aws/komodor-public/telegraf:1.27 
          imagePullPolicy: IfNotPresent
          volumeMounts:
          - name: k8s-watcher-metrics-config
            mountPath: /etc/telegraf/telegraf.conf
            subPath: telegraf.conf  
          resources:
            limits:
              cpu: 1
              memory: 2Gi
            requests:
              cpu: 0.1
              memory: 256Mi
          envFrom:
          - configMapRef:
              name:  k8s-watcher-daemon-env-vars
          env:
          - name: CLUSTER_NAME
            value: YOUR_CLUSTER_NAME
        
        - name: network-mapper-YOUR_CLUSTER_NAME
          image: 'public.ecr.aws/komodor-public/network-mapper:v1.0.3'
          imagePullPolicy: IfNotPresent
          resources:
            {}
          env:
          - name: OTTERIZE_DEBUG
            value: "false"
          
          
          
          - name: OTTERIZE_UPLOAD_INTERVAL_SECONDS
            value: "60"
          securityContext:
            allowPrivilegeEscalation: false
            capabilities:
              drop:
                - "ALL"
        - name: "supervisor"
          image: "public.ecr.aws/komodor-public/komodor-agent:0.2.72"
          imagePullPolicy: IfNotPresent
          resources:
            requests:
              cpu: 0.1
              memory: 256Mi
          volumeMounts:
            - name: agent-configuration
              mountPath: /etc/komodor
          command: ["supervisor"]
          env:
            - name: KOMOKW_API_KEY
              valueFrom:
                secretKeyRef:
                  name: k8s-watcher-secret
                  key: apiKey
            - name: KOMOKW_SERVERS_HEALTHCHECK_PORT
              value: "8089"            
          securityContext:
            readOnlyRootFilesystem: true
            runAsUser: 1000
            runAsGroup: 1000
            allowPrivilegeEscalation: false
          ports:
            - name: http-healthz
              containerPort: 8089
          livenessProbe:
            httpGet:
              path: /healthz
              port: http-healthz
            periodSeconds: 60
            initialDelaySeconds: 15
            failureThreshold: 10
            successThreshold: 1
          readinessProbe:
            httpGet:
              path: /healthz
              port: http-healthz
            initialDelaySeconds: 5
            periodSeconds: 5
            failureThreshold: 3
            successThreshold: 1
        - name: k8s-watcher
          image: "public.ecr.aws/komodor-public/komodor-agent:0.2.72"
          imagePullPolicy: IfNotPresent
          command: ["watcher"]
          resources:
            limits:
              cpu: 2
              memory: 8Gi
            requests:
              cpu: 0.25
              memory: 256Mi
          volumeMounts:
            - name: agent-configuration
              mountPath: /etc/komodor
            - name: tmp
              mountPath: /tmp
            - name: podinfo
              mountPath: /etc/podinfo
            - name: helm-data
              mountPath: /opt/watcher/helm
            - name: kube-cache
              mountPath: /.kube
            
          env:
            - name: KOMOKW_API_KEY
              valueFrom:
                secretKeyRef:
                  name: k8s-watcher-secret
                  key: apiKey
            - name: KOMOKW_TAGS
              value: ""
            - name: HELM_CACHE_HOME
              value: /opt/watcher/helm/cache
            - name: HELM_CONFIG_HOME
              value: /opt/watcher/helm/config
            - name: HELM_DATA_HOME
              value: /opt/watcher/helm/data            
          securityContext:
            readOnlyRootFilesystem: true
            runAsUser: 1000
            runAsGroup: 1000
            allowPrivilegeEscalation: false
          ports:
            - name: http-healthz
              containerPort: 8090
          livenessProbe:
            httpGet:
              path: /healthz
              port: http-healthz
            periodSeconds: 60
            initialDelaySeconds: 15
            failureThreshold: 10
            successThreshold: 1
          readinessProbe:
            httpGet:
              path: /healthz
              port: http-healthz
            initialDelaySeconds: 5
            periodSeconds: 5
            failureThreshold: 3
            successThreshold: 1
      volumes:
        
        - name: k8s-watcher-metrics-config
          configMap:
            name: k8s-watcher-metrics-config
        - name: agent-configuration
          configMap:
            name: k8s-watcher-config
            items:
              - key: komodor-k8s-watcher.yaml
                path: komodor-k8s-watcher.yaml
        - name: tmp
          emptyDir:
            sizeLimit: 100Mi
        - name: podinfo
          downwardAPI:
            items:
              - path: "mem_limit"
                resourceFieldRef:
                  containerName: k8s-watcher
                  resource: limits.memory
                  divisor: 1Mi
        - name: helm-data
          emptyDir:
            sizeLimit: 256Mi
        - name: kube-cache
          emptyDir:
            sizeLimit: 1Gi
---
