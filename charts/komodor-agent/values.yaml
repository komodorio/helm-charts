# apiKey -- (guid) **(*required*)** To be obtained from komodor app during onboarding
apiKey:
# apiKeySecret -- (string) Secret name containing Komodor agent api key
apiKeySecret:
# createNamespace -- Creates the namespace
createNamespace: true
# tags -- (dict) Tags the agent in order to identify it based on `key:value` properties separated by semicolon (`;`)
# example: `--set tags.env=staging,tags.team=payments` --- Can also be set in the values under `tags` as a dictionary of key:value strings
tags: { }
# clusterName -- **(*required*)** Name to be displayed in the Komodor web application
clusterName:
# createRbac -- Creates the necessary RBAC resources for the agent - use with caution!
createRbac: true

# telegrafImageVersion -- (string) Telegraf version to be used
telegrafImageVersion: &telegrafVersion v1.34.3-build1-alpine
# telegrafWindowsImageVersion -- (string) Telegraf version to be used for windows
telegrafWindowsImageVersion: &telegrafWindowsVersion v1.34.3-build1-windows

# serviceAccount -- Configure service account for the agent
# @default -- See sub-values
serviceAccount:
  # serviceAccount.create -- Creates a service account for the agent
  create: true
  # serviceAccount.name -- (string) Name of the service account, Required if `serviceAccount.create` is false
  name:
  # serviceAccount.annotations -- Add annotations to the service account
  annotations: { }

proxy:
  # proxy.enabled -- Enable proxy for the agent
  enabled: false
  # proxy.komodorOnly -- Configure proxy to be applied only on communication to Komodor servers (comms. to K8S API remains without proxy)
  komodorOnly: true
  # proxy.http -- (string) Configure Proxy setting (HTTP_PROXY) `eg. http://proxy.com:8080`
  http:
  # proxy.https -- (string) Configure Proxy setting (HTTPS_PROXY) `eg. https://proxy.com:8080`
  https:
  # proxy.no_proxy -- (string) Specify specific domains to ignore proxy for. eg. `komodor.com,google.com`
  no_proxy:

# customCa -- Configure custom CA for the agent
# @default -- See sub-values
customCa:
  # customCa.enabled -- (bool) Enable custom CA certificate for the agent
  enabled: false
  # customCa.secretName -- (string) Name of the secret containing the CA
  secretName:
  # customCa.resources -- (dict) Set custom resources to the custom CA container
  resources:
    limits:
      cpu: 10m
      memory: 100Mi
    requests:
      cpu: 1m
      memory: 10Mi

# imageRepo -- (string) Override the komodor agent image repository.
imageRepo: public.ecr.aws/komodor-public
# pullPolicy -- (string) Default Image pull policy for the komodor agent image exceptable values <ifNotPresent\Always\Never>.
pullPolicy: IfNotPresent
# imagePullSecret -- (string) Set the image pull secret for the komodor agent
imagePullSecret:

# capabilities -- Configure the agent capabilities
# @default -- See sub-values
capabilities:
  # capabilities.komodorCRD -- (bool) Native komodor custom resources
  komodorCRD: true
  # capabilities.metrics -- (bool) Fetch workload metrics and send them to komodor backend
  metrics: true
  # capabilities.nodeEnricher -- (bool) Enable node enricher capabilities by the komodor agent
  nodeEnricher: true
  # capabilities.actions -- (bool) Allow users to perform actions on the cluster, granular access control is defined in the application<boolean>
  actions: true
  # capabilities.helm -- Enable helm capabilities by the komodor agent
  helm:
    # capabilities.helm.enabled -- (bool) Enable helm capabilities by the komodor agent
    enabled: true
    # capabilities.helm.readonly -- (bool) Allow komodor to read helm resources only (remove create/update/delete permissions from secrets)
    readonly: false
  # capabilities.rbac -- (bool) Allow komodor to create and manage serviceaccounts, roles and bindings in cluster
  rbac: true
  # capabilities.rbacClusterSyncParams -- Configure the agent cluster sync capabilities
  # @default -- See sub-values
  rbacClusterSyncParams:
    # capabilities.rbacClusterSyncParams.enabled -- (bool) Enable cluster sync configuration from helm chart
    enabled: false
    # capabilities.rbacClusterSyncParams.clusterURL -- (string) URL of the cluster to sync with
    clusterURL:
    # capabilities.rbacClusterSyncParams.ingressCertConfiguration -- (dict) Configuration for the ingress certificate
    # @default -- See sub-values
    ingressCertConfiguration:
      # capabilities.rbacClusterSyncParams.ingressCertConfiguration.namespace -- (string) Namespace of the resource containing the certificate
      namespace:
      # capabilities.rbacClusterSyncParams.ingressCertConfiguration.kind -- (string) Kind of the resource containing the certificate (Secret/ConfigMap)
      kind:
      # capabilities.rbacClusterSyncParams.ingressCertConfiguration.name -- (string) Name of the resource containing the certificate
      name:
      # capabilities.rbacClusterSyncParams.ingressCertConfiguration.dataPath -- (string) Path to the certificate data in the resource (crt.ca)
      dataPath:

  # capabilities.events -- Configure the agent events capabilities
  # @default -- See sub-values
  events:
    # capabilities.events.watchNamespace -- (string) Watch a specific namespace, or all namespaces ("", "all")
    # @default -- all
    watchNamespace: all
    # capabilities.events.namespacesDenylist -- (array of strings) Do not watch events from these namespaces. eg. `["kube-system", "kube-public"]`
    namespacesDenylist: []
    # capabilities.events.redact -- (list) Redact workload names from the komodor events. eg. `["password", "token"]`
    redact: []
    # capabilities.events.enableRWCache -- (bool) Mounts a ReadWrite cache volume for the kubernetes api cache
    enableRWCache: true
    # capabilities.events.create -- (bool) allow create kubernetes events for enrichment
    create: true

  # capabilities.logs -- Configure the agent logs capabilities
  # @default -- See sub-values
  logs:
    # capabilities.logs.enabled -- (bool) Fetch pod logs from komodor backend
    enabled: true
    # capabilities.logs.logsNamespacesDenylist -- (list) Do not fetch logs from these namespaces. eg. `["kube-system", "kube-public"]`
    logsNamespacesDenylist: []
    # capabilities.logs.logsNamespacesAllowlist -- (list) Only fetch logs from these namespaces. eg. `["kube-system", "kube-public"]`
    logsNamespacesAllowlist: []
    # capabilities.logs.nameDenylist -- (list) Do not fetch logs from these workloads. eg. `["supersecret-workload", "password-manager"]`
    nameDenylist: []
    # capabilities.logs.redact -- (list) Redact logs from the komodor logs. eg. `["password", "token"]`
    redact: []

  # capabilities.redaction -- Configure the agent data redaction capabilities
  # @default -- See sub-values
  redaction:
    # capabilities.redaction.secret -- Configuration for the "Secret" resource type
    secret:
      # capabilities.redaction.secret.enable -- (bool) Enable redaction for the "Secret" resource type
      enable: true
      # capabilities.redaction.secret.keepOnlyHelmReleases -- (bool) Determine if only helm releases should be collected, if true - wipe and redact all other secrets data
      keepOnlyHelmReleases: false

  # capabilities.telemetry -- Configure the agent telemetry capabilities
  # @default -- See sub-values
  telemetry:
    # capabilities.telemetry.enabled -- (bool) Enable telemetry capabilities by the komodor agent
    enabled: true
    # capabilities.telemetry.collectApiServerMetrics -- Collect metrics from the api server (Should only be used for debugging purposes)
    collectApiServerMetrics: false

  # capabilities.kubectlProxy -- Configure the komodor kubectl proxy capabilities
  # @default -- See sub-values
  kubectlProxy:
    # capabilities.kubectlProxy.enabled -- (bool) Enable the komodor kubectl proxy
    enabled: false

  # capabilities.admissionController -- Configure the komodor admission controller capabilities
  # @default -- See sub-values
  admissionController:
    # capabilities.admissionController.enabled -- (bool) Enable the komodor admission controller
    enabled: false
    # capabilities.admissionController.logLevel -- (string) Log level for the admission controller
    logLevel: info
    # capabilities.admissionController.logFormat -- (string) Log format for the admission controller
    logFormat: json
    # capabilities.admissionController.webhookServer -- Configure the webhook server for the admission controller
    # @default -- See sub-values
    webhookServer:
      # capabilities.admissionController.webhookServer.serviceName -- (string) Name of the service for the webhook server
      serviceName: komodor-admission-controller
      # capabilities.admissionController.webhookServer.port -- (int) Port of the webhook server
      port: 8443
      # capabilities.admissionController.webhookServer.tlsCertFile -- (string) Path to the TLS certificate file for the webhook server. If set, overrides the default certificate generation
      # @default -- /etc/komodor/admission/tls/tls.crt
      tlsCertFile:
      # capabilities.admissionController.webhookServer.tlsKeyFile -- (string) Path to the TLS key file for the webhook server. If set, overrides the default certificate generation
      # @default -- /etc/komodor/admission/tls/tls.key
      tlsKeyFile:
      # capabilities.admissionController.webhookServer.reuseGeneratedTlsSecret -- (bool) If true, the webhook server will reuse the generated TLS secret. If false, the webhook server will recreate a new TLS secret on every upgrade.
      # @default -- true
      reuseGeneratedTlsSecret: true
    # capabilities.admissionController.mutatingWebhook -- Configure the mutating webhook
    # @default -- See sub-values
    mutatingWebhook:
      # capabilities.admissionController.mutatingWebhook.selfManage -- (bool) If true, the mutating webhook will be managed by the chart. If false, the mutating webhook will be managed by the user.
      selfManage: false
      # capabilities.admissionController.mutatingWebhook.timeoutSeconds -- (int) Timeout for the webhook call in seconds
      timeoutSeconds: 5
      # capabilities.admissionController.mutatingWebhook.podBinpackingWebhookPath -- (string) Path for the pod binpacking webhook
      podBinpackingWebhookPath: /webhook/binpacking/pod
      # capabilities.admissionController.mutatingWebhook.caBundle -- (string) CA bundle for the mutating webhook configuration. It should match the webhook server CA.
      # @default -- using the kube-root-ca.crt ConfigMap in the kube-system namespace
      caBundle:
    # capabilities.admissionController.binpacking -- Configure the binpacking capabilities for the admission controller
    # @default -- See sub-values
    binpacking:
      # capabilities.admissionController.binpacking.enabled -- (bool) Enable binpacking capabilities by the komodor agent
      enabled: false
      # capabilities.admissionController.binpacking.markUnevictable -- (bool) Add a label to mark pods as unevictable
      markUnevictable: false
      # capabilities.admissionController.binpacking.addNodeAffinityToMarkedPods -- (bool) Add node affinity to marked pods to prefer scheduling on nodes with already unevictable pods
      addNodeAffinityToMarkedPods: false
      # capabilities.admissionController.binpacking.unevictableLabelKey -- (string) Label key to mark pods as unevictable
      #unevictableLabelKey: "komodor.io/unevictable"
      # capabilities.admissionController.binpacking.modifiedAnnotationKey -- (string) Annotation key to mark pods as modified by the binpacking admission controller
      #modifiedAnnotationKey: "komodor.io/modified-at"
      # capabilities.admissionController.binpacking.unevictablePodNodeAffinityWeight -- (int) Weight for the node affinity of unevictable pods
      #unevictablePodNodeAffinityWeight: 100


# components -- Configure the agent components
# @default -- See sub-values
components:
  # components.komodorAgent -- Configure the komodor agent components
  # @default -- See sub-values
  komodorAgent:
    # components.komodorAgent.PriorityClassValue -- Set the priority class value for the komodor agent deployment
    PriorityClassValue: 10000000
    # components.komodorAgent.affinity -- Set node affinity for the komodor agent deployment
    affinity: {}
    # components.komodorAgent.annotations -- Set annotations for the komodor agent deployment
    annotations: {}
    # components.komodorAgent.labels -- Set custom labels
    labels: {}
    # components.komodorAgent.nodeSelector -- Set node selectors for the komodor agent deployment
    nodeSelector: {}
    # components.komodorAgent.tolerations -- Set tolerations for the komodor agent deployment
    tolerations: []
    # components.komodorAgent.podAnnotations -- Set pod annotations for the komodor agent deployment
    podAnnotations: {}
    # components.komodorAgent.securityContext -- Set custom securityContext to the komodor agent deployment (use with caution)
    securityContext: {}
    # components.komodorAgent.strategy -- Set the rolling update strategy for the komodor agent deployment
    strategy: {}

    watcher:
      # components.komodorAgent.watcher.image -- Override the komodor agent watcher image name or tag.
      # @default -- `{ "name": "k8s-watcher", "tag": .Chart.AppVersion }`
      image:
        name: komodor-agent
        tag:
      # components.komodorAgent.watcher.resources -- Set custom resources to the komodor agent watcher container
      resources:
        limits:
          cpu: 2
          memory: 8Gi
        requests:
          cpu: 0.25
          memory: 256Mi
      # components.komodorAgent.watcher.securityContext -- Set security context for the komodor agent watcher container (use with caution)
      securityContext: {}
      # components.komodorAgent.watcher.ports -- Override the komodor agent watcher ports configuration
      ports:
        # components.komodorAgent.watcher.ports.healthCheck -- Override the health check port of the komodor agent watcher
        healthCheck: 8090
      # components.komodorAgent.watcher.extraEnvVars -- List of additional environment variables, Each entry is a key-value pair
      extraEnvVars: []

    supervisor:
      # components.komodorAgent.supervisor.image -- Override the komodor agent supervisor image name or tag.
      # @default -- `{ "name": "supervisor", "tag": .Chart.AppVersion }`
      image:
        # @ignored
        name: komodor-agent
        # @ignored
        tag:
      # components.komodorAgent.supervisor.resources -- Set custom resources to the komodor agent supervisor container
      resources:
        requests:
          cpu: 0.1
          memory: 256Mi
      # components.komodorAgent.supervisor.securityContext -- Set security context for the komodor agent supervisor container (use with caution)
      securityContext: {}
      # components.komodorAgent.supervisor.ports -- Override the komodor agent supervisor ports configuration
      ports:
        # components.komodorAgent.supervisor.ports.healthCheck -- Override the health check port of the komodor agent supervisor
        healthCheck: 8089
      # components.komodorAgent.supervisor.extraEnvVars -- List of additional environment variables, Each entry is a key-value pair
      extraEnvVars: []

  # components.komodorKubectlProxy -- Configure the komodor kubectl proxy components
  # @default -- See sub-values
  komodorKubectlProxy:
    # components.komodorKubectlProxy.image -- Override the komodor kubectl proxy image name or tag.
    # @default -- see sub-values
    image:
      name: nginx
      tag: 1.27.5
    # components.komodorKubectlProxy.resources -- Set custom resources to the komodor kubectl proxy container
    resources: {}
    # components.komodorKubectlProxy.affinity -- Set node affinity for the komodor kubectl proxy deployment
    affinity: {}
    # components.komodorKubectlProxy.annotations -- Set annotations for the komodor kubectl proxy deployment
    annotations: {}
    # components.komodorKubectlProxy.podAnnotations -- Set pod annotations for the komodor kubectl proxy deployment
    podAnnotations: {}
    # components.komodorKubectlProxy.labels -- Set custom labels
    labels: {}
    # components.komodorKubectlProxy.nodeSelector -- Set node selectors for the komodor kubectl proxy deployment
    nodeSelector: {}
    # components.komodorKubectlProxy.tolerations -- Set tolerations for the komodor kubectl proxy deployment
    tolerations: []
    # components.komodorKubectlProxy.securityContext -- Set custom securityContext to the komodor kubectl proxy deployment (use with caution)
    securityContext: {}
    # components.komodorKubectlProxy.strategy -- Set the rolling update strategy for the komodor kubectl proxy deployment
    strategy: {}
    
  # components.admissionController -- Configure the komodor admission controller component
  # @default -- See sub-values
  admissionController:
    # components.admissionController.image -- Override the komodor admission controller image name or tag.
    # @default -- see sub-values
    image:
      name: admission-controller
      tag: 0.0.5
    # components.admissionController.resources -- Set custom resources to the komodor admission controller container - Memory utilization is relative to the amount of: [pods, nodes, pvcs, pvs, pdbs] resources you have in the cluster.
    resources:
      limits:
          cpu: 1
          memory: 4Gi
      requests:
          cpu: 500m
          memory: 1Gi
    # components.admissionController.affinity -- Set node affinity for the komodor admission controller deployment
    affinity: {}
    # components.admissionController.annotations -- Set annotations for the komodor admission controller deployment
    annotations: {}
    # components.admissionController.podAnnotations -- Set pod annotations for the komodor admission controller deployment
    podAnnotations: {}
    # components.admissionController.labels -- Set custom labels
    labels: {}
    # components.admissionController.nodeSelector -- Set node selectors for the komodor admission controller deployment
    nodeSelector: {}
    # components.admissionController.tolerations -- Set tolerations for the komodor admission controller deployment
    tolerations: []
    # components.admissionController.securityContext -- Set custom securityContext to the komodor admission controller deployment (use with caution)
    securityContext: {}
    # components.admissionController.strategy -- Set the rolling update strategy for the komodor admission controller
    strategy: {}
    # components.admissionController.extraVolumes -- List of additional volumes to mount in the komodor admission controller deployment/pod
    #      extraVolumes:
    #        - volume:
    #            name: webhook-tls
    #            secret:
    #              secretName: komodor-admission-controller-tls
    #          volumeMount:
    #            name: webhook-tls
    #            mountPath: /etc/komodor/admission/tls
    #            readOnly: true
    extraVolumes: []


  komodorMetrics:
    # components.komodorMetrics.PriorityClassValue -- Set the priority class value for the komodor metrics agent deployment
    PriorityClassValue: 10000000
    # components.komodorMetrics.affinity -- Set node affinity for the komodor metrics agent deployment
    affinity: {}
    # components.komodorMetrics.annotations -- Set annotations for the komodor metrics agent deployment
    annotations: {}
    # components.komodorMetrics.labels -- Set custom labels
    labels: {}
    # components.komodorMetrics.nodeSelector -- Set node selectors for the komodor metrics agent deployment
    nodeSelector: {}
    # components.komodorMetrics.tolerations -- Set tolerations for the komodor metrics agent deployment
    tolerations: []
    # components.komodorMetrics.podAnnotations -- Set pod annotations for the komodor metrics agent deployment
    podAnnotations: {}
    # components.komodorMetrics.securityContext -- Set custom securityContext to the komodor metrics agent deployment (use with caution)
    securityContext: {}
    # components.komodorMetrics.strategy -- Set the rolling update strategy for the komodor metrics agent deployment
    strategy: {}

    # components.komodorMetrics.metricsInit -- Configure the komodor metrics init container
    # @default -- See sub-values
    metricsInit:
      # components.komodorMetrics.metricsInit.image -- Override the komodor agent metrics init image name or tag.
      # @default -- `{ "name": "komodor-agent", "tag": .Chart.AppVersion }`
      image:
        name: komodor-agent
        tag:
      # components.komodorMetrics.metricsInit.resources -- Set custom resources to the komodor agent metrics init container
      resources: {}
      # components.komodorMetrics.metricsInit.extraEnvVars -- List of additional environment variables, Each entry is a key-value pair
      extraEnvVars: []

    metrics:
      # components.komodorMetrics.metrics.image -- Override the komodor agent metrics image name or tag.
      image:
        name: telegraf
        tag: *telegrafVersion
      # components.komodorMetrics.metrics.resources -- Set custom resources to the komodor agent metrics container
      resources:
        limits:
          cpu: 1
          memory: 1Gi
        requests:
          cpu: 0.1
          memory: 384Mi
      # components.komodorMetrics.metrics.extraEnvVars -- List of additional environment variables, Each entry is a key-value pair
      extraEnvVars: []

  # components.komodorDaemon -- Configure the komodor agent components
  # @default -- See sub-values
  komodorDaemon:
    # components.komodorDaemon.hostNetwork -- Set host network for the komodor agent daemon
    hostNetwork: false
    # components.komodorDaemon.dnsPolicy -- Set dns policy for the komodor agent daemon
    dnsPolicy: ClusterFirst
    # components.komodorDaemon.PriorityClassValue -- Set the priority class value for the komodor daemon deployment
    PriorityClassValue: 10000000
    # components.komodorDaemon.affinity -- Set node affinity for the komodor agent daemon
    affinity: {}
    # components.komodorDaemon.annotations -- Adds custom annotations - Example: `--set annotations."app\.komodor\.com/app"="komodor-agent"`
    annotations: {}
    # components.komodorDaemon.labels -- Adds custom labels
    labels: {}
    # components.komodorDaemon.nodeSelector -- Set node selectors for the komodor agent daemon
    nodeSelector: {}
    # components.komodorDaemon.tolerations -- Add tolerations to the komodor agent daemon
    tolerations:
      - operator: "Exists"
    # components.komodorDaemon.podAnnotations --  # Add annotations to the komodor agent watcher pod
    podAnnotations: {}
    # components.komodorDaemon.securityContext -- Set custom securityContext to the komodor agent daemon (use with caution)
    securityContext: {}
    # components.komodorDaemon.updateStrategy -- Set the rolling update strategy for the komodor agent daemon deployment
    updateStrategy: {}

    # components.komodorDaemon.metrics -- Configure the komodor daemon metrics components

    # components.komodorDaemon.metricsInit -- Configure the komodor daemon metrics init container
    # @default -- See sub-values
    metricsInit:
      # components.komodorDaemon.metricsInit.image -- Override the komodor agent metrics init image name or tag.
      # @default -- `{ "name": "init-daemon-agent", "tag": .Chart.AppVersion }`
      image:
        name: komodor-agent
        tag:
      # components.komodorDaemon.metricsInit.resources -- Set custom resources to the komodor agent metrics init container
      resources:
        limits:
          cpu: 1
          memory: 100Mi
        requests:
          cpu: 0.1
          memory: 50Mi
      # components.komodorDaemon.metricsInit.extraEnvVars -- List of additional environment variables, Each entry is a key-value pair
      extraEnvVars: []

    metrics:
      # components.komodorDaemon.metrics.image -- Override the komodor agent metrics image name or tag.
      image:
        name: telegraf
        tag: *telegrafVersion
      # components.komodorDaemon.metrics.resources -- Set custom resources to the komodor agent metrics container
      resources:
        limits:
          cpu: 1
          memory: 1Gi
        requests:
          cpu: 0.1
          memory: 384Mi
      # components.komodorDaemon.metrics.extraEnvVars -- List of additional environment variables, Each entry is a key-value pair
      extraEnvVars: []
      # components.komodorDaemon.metrics.quiet -- Set the quiet mode for the komodor agent metrics
      quiet: false
      # components.komodorDaemon.metrics.dcgm -- Enable collecting NVIDIA GPU metrics via DCGM
      dcgm: true

    # components.komodorDaemon.nodeEnricher -- Configure the komodor daemon node enricher components
    # @default -- See sub-values
    nodeEnricher:
      # components.komodorDaemon.nodeEnricher.image -- Override the komodor agent node enricher image name or tag.
      image:
        name: komodor-agent
        tag:
      # components.komodorDaemon.nodeEnricher.resources -- Set custom resources to the komodor agent node enricher container
      resources:
        limits:
          cpu: 10m
          memory: 100Mi
        requests:
          cpu: 1m
          memory: 10Mi
      # components.komodorDaemon.nodeEnricher.extraEnvVars -- List of additional environment variables, Each entry is a key-value pair
      extraEnvVars: []

  # components.komodorDaemonWindows -- Configure the komodor agent components
  # @default -- See sub-values
  komodorDaemonWindows:
    # components.komodorDaemonWindows.dnsPolicy -- Set dns policy for the komodor agent daemon
    dnsPolicy: ClusterFirst
    # components.komodorDaemonWindows.affinity -- Set node affinity for the komodor agent daemon
    affinity: {}
    # components.komodorDaemonWindows.annotations -- Adds custom annotations - Example: `--set annotations."app\.komodor\.com/app"="komodor-agent"`
    annotations: {}
    # components.komodorDaemonWindows.labels -- Adds custom labels
    labels: {}
    # components.komodorDaemonWindows.nodeSelector -- Set node selectors for the komodor agent daemon
    nodeSelector: {}
    # components.komodorDaemonWindows.tolerations -- Add tolerations to the komodor agent daemon
    tolerations:
      - operator: "Exists"
    # components.komodorDaemonWindows.podAnnotations --  # Add annotations to the komodor agent watcher pod
    podAnnotations: {}
    # components.komodorDaemonWindows.updateStrategy -- Set the rolling update strategy for the komodor agent daemon deployment
    updateStrategy: {}

    # components.komodorDaemonWindows.metrics -- Configure the komodor daemon metrics components
    metrics:
      # components.komodorDaemonWindows.metrics.image -- Override the komodor agent metrics image name or tag.
      image:
        name: telegraf-windows
        tag: *telegrafWindowsVersion
      # components.komodorDaemonWindows.metrics.resources -- Set custom resources to the komodor agent metrics container
      resources:
        limits:
          cpu: 1
          memory: 1Gi
        requests:
          cpu: 0.1
          memory: 384Mi
      # components.komodorDaemonWindows.metrics.extraEnvVars -- List of additional environment variables, Each entry is a key-value pair
      extraEnvVars: []
      # components.komodorDaemonWindows.metrics.quiet -- Set the quiet mode for the komodor agent metrics
      quiet: false

allowedResources:
  # allowedResources.event -- Enables watching `event`
  event: true
  # allowedResources.deployment -- Enables watching `deployments`
  deployment: true
  # allowedResources.replicationController -- Enables watching `replicationControllers`
  replicationController: true
  # allowedResources.replicaSet -- Enables watching `replicaSets`
  replicaSet: true
  # allowedResources.daemonSet -- Enables watching `daemonSets`
  daemonSet: true
  # allowedResources.statefulSet -- Enables watching `statefulSets`
  statefulSet: true
  # allowedResources.service -- Enables watching `services`
  service: true
  # allowedResources.pod -- Enables watching `pods`
  pod: true
  # allowedResources.job -- Enables watching `jobs`
  job: true
  # allowedResources.cronjob -- Enables watching `cronjobs`
  cronjob: true
  # allowedResources.node -- Enables watching `nodes`
  node: true
  # allowedResources.clusterRole -- Enables watching `clusterRoles`
  clusterRole: true
  # allowedResources.serviceAccount -- Enables watching `serviceAccounts`
  serviceAccount: true
  # allowedResources.persistentVolume -- Enables watching `persistentVolumes`
  persistentVolume: true
  # allowedResources.persistentVolumeClaim -- Enables watching `persistentVolumeClaims`
  persistentVolumeClaim: true
  # allowedResources.namespace -- Enables watching `namespaces`
  namespace: true
  # allowedResources.secret -- Enables watching `secrets`
  secret: true
  # allowedResources.configMap -- Enables watching `configmaps`
  configMap: true
  # allowedResources.ingress -- Enables watching `ingresses`
  ingress: true
  # allowedResources.endpoints -- Enables watching `endpoints`
  endpoints: true
  # allowedResources.storageClass -- Enables watching `storageClasses`
  storageClass: true
  # allowedResources.rollout -- Enables watching `rollouts`
  rollout: true
  # allowedResources.metrics -- Enables watching `metrics`
  metrics: true
  # allowedResources.limitRange -- Enables watching `limitRange`
  limitRange: true
  # allowedResources.podTemplate -- Enables watching `podTemplate`
  podTemplate: true
  # allowedResources.resourceQuota -- Enables watching `resourceQuota`
  resourceQuota: true
  # allowedResources.admissionRegistrationResources -- Enables watching `admissionRegistrationResources`
  admissionRegistrationResources: true
  # allowedResources.controllerRevision -- Enables watching `controllerRevision`
  controllerRevision: true
  # allowedResources.authorizationResources -- Enables watching `authorizationResources`
  authorizationResources: true
  # allowedResources.horizontalPodAutoscaler -- Enables watching `horizontalPodAutoscaler`
  horizontalPodAutoscaler: true
  # allowedResources.certificateSigningRequest -- Enables watching `certificateSigningRequest`
  certificateSigningRequest: true
  # allowedResources.lease -- Enables watching `lease`
  lease: true
  # allowedResources.endpointSlice -- Enables watching `endpointslice`
  endpointSlice: true
  # allowedResources.flowControlResources -- Enables watching `flowControlResources`
  flowControlResources: true
  # allowedResources.ingressClass -- Enables watching `ingressClass`
  ingressClass: true

  # allowedResources.networkPolicy -- Enables watching `networkPolicy`
  networkPolicy: true
  # allowedResources.runtimeClass -- Enables watching `runtimeClass`
  runtimeClass: true
  # allowedResources.policyResources -- Enables watching `policyResources`
  policyResources: true
  # allowedResources.clusterRoleBinding -- Enables watching `clusterRoleBinding`
  clusterRoleBinding: true
  # allowedResources.roleBinding -- Enables watching `roleBinding`
  roleBinding: true
  # allowedResources.role -- Enables watching `role`
  role: true
  # allowedResources.priorityClass -- Enables watching `priorityClass`
  priorityClass: true
  # allowedResources.csiDriver -- Enables watching `csiDriver`
  csiDriver: true
  # allowedResources.csiNode -- Enables watching `csiNode`
  csiNode: true
  # allowedResources.csiStorageCapacity -- Enables watching `csiStorageCapacity`
  csiStorageCapacity: true
  # allowedResources.volumeAttachment -- Enables watching `volumeAttachment`
  volumeAttachment: true
  # allowedResources.argoWorkflows -- Enables watching argo resources
  # @default -- See sub-values
  argoWorkflows:
    # allowedResources.argoWorkflows.workflows -- Enables watching Argo `workflows`
    workflows: true
    # allowedResources.argoWorkflows.workflowTemplates -- Enables watching Argo `workflowTemplates`
    workflowTemplates: true
    # allowedResources.argoWorkflows.clusterWorkflowTemplates -- Enables watching Argo `clusterWorkflowTemplates`
    clusterWorkflowTemplates: true
    # allowedResources.argoWorkflows.cronWorkflows -- Enables watching Argo `cronWorkflows`
    cronWorkflows: true
  # allowedResources.customReadAPIGroups -- A list of custom API groups to allow read access to - each array element should be a string which represents the group name
  customReadAPIGroups: []
  # allowedResources.allowReadAll -- Allow reading all the resources in the cluster
  allowReadAll: true

# @ignored
communications:
  apiServerUrl: https://kubernetes.default.svc.cluster.local
  serverHost: &serverHost https://app.komodor.com
  wsHost: wss://app.komodor.com
  tasksServerHost: *serverHost
  telemetryServerHost: https://telemetry.komodor.com
  mgmtServerHost: *serverHost
