{{- if and .Values.capabilities.telemetry.enabled .Values.capabilities.telemetry.deployOtelCollector }}
apiVersion: v1
kind: ConfigMap
metadata:
  name: {{ include "komodorAgent.fullname" . }}-opentelemetry-config
  labels:
    {{- include "komodorAgent.labels" . | nindent 4 }}
data:
  config.yaml: |
    extensions:
      health_check:
        endpoint: "0.0.0.0:13133"
        path: "/status/health"

    receivers:
      otlp:
        protocols:
          http:
            endpoint: "0.0.0.0:4318"
      filelog/komodor:
        include:
          - "/var/log/pods/*komodor-agent*/*/*.log"
        include_file_name: false
        include_file_path: true
        poll_interval: 500ms
        start_at: beginning
        max_log_size: 1MiB
        attributes:
          komodor.cluster.name: "${env:KOMO_CLUSTER_NAME}"
        # Always try to parse as much as possible (on_error: next) and send quietly whatever resulted.
        # We will be able to monitor parsing errors in the backend instead of spamming with parse errors.
        operators:
        - type: regex_parser
          id: parse_log_path
          parse_from: attributes["log.file.path"]
          regex: "/var/log/pods/(?P<namespace>[^_/]+)_(?P<pod>[^_/]+)_[^/]+/(?P<container>[^/]+)/.*"
          # this will extract:
          # attributes["namespace"], attributes["pod"], attributes["container"]
          on_error: next
        - type: add
          id: add_service_name_attr
          field: attributes.service
          value: EXPR(attributes.container)
          on_error: next
        - type: regex_parser
          id: parse_kube_log_header
          regex: '^(?P<timestamp>[^\s]+)\s+(?P<stream>stdout|stderr)\s+F\s+(?P<log>.*)$'
          timestamp:
            parse_from: attributes.timestamp
            layout_type: gotime
            layout: '2006-01-02T15:04:05.999999999Z07:00'
          on_error: next
        # Try containerd JSON logs next
        - type: json_parser
          id: parse_containerd_json
          parse_from: body
          timestamp:
            parse_from: attributes.ts
            layout_type: gotime
            layout: '2006-01-02T15:04:05.999999999Z07:00'
          severity:
            parse_from: attributes.level
          on_error: next
        - type: json_parser
          id: parse_json
          parse_from: attributes.log
          on_error: send_quiet
          severity:
            parse_from: body.level

    processors:
      batch:
        send_batch_max_size: 50
        send_batch_size: 10
        timeout: 10s
      memory_limiter:
        check_interval: 1s
        limit_percentage: 75
        spike_limit_percentage: 20

    exporters:
      # Debug exporter can be used for development and testing purposes
      debug:
        verbosity: normal
        sampling_initial: 5
        sampling_thereafter: 200
      otlphttp/komodor:
        endpoint: {{ .Values.communications.telemetryServerHost }}
        compression: gzip
        timeout: 30s
        headers:
          X-API-KEY: "${env:KOMO_API_KEY}"

    service:
      telemetry:
        metrics:
          readers:
            - pull:
                exporter:
                  prometheus:
                    host: '0.0.0.0'
                    port: 8888
        logs:
          encoding: json
          level: info
      extensions: [health_check]
      pipelines:
        traces:
          receivers: [otlp]
          processors: [memory_limiter, batch]
          exporters: [otlphttp/komodor]
        metrics:
          receivers: [otlp]
          processors: [memory_limiter, batch]
          exporters: [otlphttp/komodor]
        logs:
          receivers: [filelog/komodor]
          processors: [memory_limiter, batch]
          exporters: [otlphttp/komodor]
{{- end }}