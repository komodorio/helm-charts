steps:
  - label: ":memo: LEGACY: helm template check for sanity"
    command: helm template k8s-watcher charts/k8s-watcher -f charts/k8s-watcher/values.yaml --set apiKey="sanity" --set watcher.clusterName=test-template
    agents:
      builder: "dind"
    if: build.message !~ /feat\(OSS.+\):/i

  - label: ":memo: helm template check for sanity"
    command: helm template komodor-agent charts/komodor-agent -f charts/komodor-agent/values.yaml --set apiKey="sanity" --set clusterName=test-template
    agents:
      builder: "dind"
    if: build.message !~ /feat\(OSS.+\):/i

  - label: ":book: Validate Readme is up to date"
    commands:
      - cd charts/komodor-agent
      - make install-helm-docs
      - make validate-readme

    if: build.message !~ /feat\(OSS.+\):/i

  - label: ":test_tube: Basic tests"
    commands:
      - cd .buildkite/tests
      - make basic_test
    agents:
      builder: "dind"
    plugins:
      - zacharymctague/aws-ssm#v1.0.0:
          parameters:
            API_KEY: /helm-chart-test/production/API_KEY

  - label: ":test_tube: values_base_test"
    commands:
      - cd .buildkite/tests
      - make values_base_test
    agents:
      builder: "dind"
    plugins:
      - zacharymctague/aws-ssm#v1.0.0:
          parameters:
            API_KEY: /helm-chart-test/production/API_KEY

  - label: ":test_tube: values_capabilities_events_test"
    commands:
      - cd .buildkite/tests
      - make values_capabilities_events_test
    agents:
      builder: "dind"
    plugins:
      - zacharymctague/aws-ssm#v1.0.0:
          parameters:
            API_KEY: /helm-chart-test/production/API_KEY

  - label: ":test_tube: values_capabilities_proxy_test"
    commands:
      - cd .buildkite/tests
      - make values_capabilities_proxy_test
    agents:
      builder: "dind"
    plugins:
      - zacharymctague/aws-ssm#v1.0.0:
          parameters:
            API_KEY: /helm-chart-test/production/API_KEY

  - label: ":test_tube: values_capabilities_test"
    commands:
      - cd .buildkite/tests
      - make values_capabilities_test
    agents:
      builder: "dind"
    plugins:
      - zacharymctague/aws-ssm#v1.0.0:
          parameters:
            API_KEY: /helm-chart-test/production/API_KEY

  - label: ":test_tube: values_components_test"
    commands:
      - cd .buildkite/tests
      - make values_components_test
    agents:
      builder: "dind"
    plugins:
      - zacharymctague/aws-ssm#v1.0.0:
          parameters:
            API_KEY: /helm-chart-test/production/API_KEY

  - wait

  - label: ":running: LEGACY: dry-run installation on staging before version bump"
    commands:
      - komo ctx staging
      - helm upgrade --install k8s-watcher-production --reuse-values --dry-run charts/k8s-watcher --set apiKey="test" --set watcher.clusterName=staging-test
    if: build.message !~ /feat\(OSS.+\):/i

  - label: ":running: dry-run installation on staging before version bump"
    commands:
      - komo ctx staging
      - helm get values komodor-agent-production > prod-values.yaml
      - helm upgrade --install komodor-agent-production -f prod-values.yaml --dry-run charts/komodor-agent --set apiKey="test" --set clusterName=staging-test
    if: build.message !~ /feat\(OSS.+\):/i
  - wait

  - label: ":new: LEGACY: test helm new install"
    commands:
      - CURRENT_VERSION=$(cat charts/k8s-watcher/Chart.yaml | grep 'version:' | awk '{print \$2}' | awk '{ gsub("\\.", "-"); print }')
      - NEW_VERSION=$(echo $$CURRENT_VERSION | awk -F- '{\$NF = \$NF + 1;} 1' | sed 's/ /-/g')
      - komo ctx staging
      - helm status ci-test-legacy-$$NEW_VERSION && helm uninstall ci-test-legacy-$$NEW_VERSION && sleep 10
      - echo "installing new helm chart on staging"
      - helm install ci-test-legacy-$$NEW_VERSION charts/k8s-watcher --set watcher.clusterName=ci-test-legacy-$$NEW_VERSION --set imagePullSecret=docker-cfg-komodorio --set namespace=ci-test-legacy-namespace-$$NEW_VERSION --set supervisor.enabled=true --set watcher.serverHost=https://staging.app.komodor.com --set watcher.tasksServerHost=https://staging.app.komodor.com --set watcher.wsHost=wss://staging.app.komodor.com --set watcher.telemetry.enable=false --set watcher.telemetry.serverHost=https://staging.telemetry.komodor.com --set apiKey=$$STAGING_API_KEY --set watcher.collectHistory=true --set watcher.nameDenylist="{leader,election}" --set watcher.resources.secret=true --set watcher.redact="{.*KEY.*,.*key.*,.*BUGSNAG.*}" --set watcher.enableAgentTaskExecution=true --set watcher.enableAgentTaskExecutionV2=true --set watcher.allowReadingPodLogs=true --set watcher.actions.basic=true --set watcher.actions.advanced=true --set watcher.enableHelm=true --set helm.enableActions=true --set watcher.actions.podExec=true --set metrics.enabled=true --set watcher.actions.portforward=true --set watcher.networkMapper.enable=false
      - echo "uninstalling new helm chart on staging"
      - helm uninstall ci-test-legacy-$$NEW_VERSION
      - kubectl wait --for=delete namespace/ci-test-legacy-namespace-$$NEW_VERSION --timeout=3m
    agents:
      builder: "dind"
    plugins:
      - zacharymctague/aws-ssm#v1.0.0:
          parameters:
            STAGING_API_KEY: /komodor/staging/kubernetes/agent-api-key
    if: build.message !~ /feat\(OSS.+\):/i && build.branch != "master"

  - label: ":new: test helm new install"
    commands:
      - CURRENT_VERSION=$(cat charts/komodor-agent/Chart.yaml | grep 'version:' | awk '{print \$2}' | awk '{ gsub("\\.", "-"); print }')
      - NEW_VERSION=$(echo $$CURRENT_VERSION | awk -F- '{\$NF = \$NF + 1;} 1' | sed 's/ /-/g')
      - NAMESPACE=ci-test-namespace-$$NEW_VERSION
      - CHART_NAME=ci-test-$$NEW_VERSION
      - komo ctx staging
      - helm status $$CHART_NAME -n $$NAMESPACE && helm uninstall $$CHART_NAME -n $$NAMESPACE && sleep 10
      - kubectl delete namespace $$NAMESPACE && kubectl wait --for=delete namespace/$$NAMESPACE --timeout=3m || echo "namespace $$NAMESPACE not found"
      - echo "installing new helm chart on staging"
      - helm install $$CHART_NAME charts/komodor-agent --set clusterName=$$CHART_NAME --set imagePullSecret=docker-cfg-komodorio --namespace=$$NAMESPACE --create-namespace --set communications.serverHost=https://staging.app.komodor.com --set communications.tasksServerHost=https://staging.app.komodor.com --set communications.wsHost=wss://staging.app.komodor.com --set capabilities.telemetry.enable=false --set communications.telemetryServerHost=https://staging.telemetry.komodor.com --set apiKey=$$KOMODOR_AGENT_STAGING_API_KEY --set allowedResources.secret=true --set capabilities.event.redact="{.*KEY.*,.*key.*,.*BUGSNAG.*}"
      - echo "uninstalling new helm chart on staging"
      - helm uninstall $$CHART_NAME -n $$NAMESPACE
      - kubectl delete namespace $$NAMESPACE
      - kubectl wait --for=delete namespace/$$NAMESPACE --timeout=3m
    agents:
      builder: "dind"
    plugins:
      - zacharymctague/aws-ssm#v1.0.0:
          parameters:
            KOMODOR_AGENT_STAGING_API_KEY: /komodor/staging/komodor-agent-chart/api-key
    if: build.message !~ /feat\(OSS.+\):/i && build.branch != "master"
  - wait

  - label: ":weight_lifter: LEGACY: test helm update install"
    commands:
      - CURRENT_VERSION=$(cat charts/k8s-watcher/Chart.yaml | grep 'version:' | awk '{print \$2}' | awk '{ gsub("\\.", "-"); print }')
      - NEW_VERSION=$(echo $$CURRENT_VERSION | awk -F- '{\$NF = \$NF + 1;} 1' | sed 's/ /-/g')
      - komo ctx staging
      - helm status ci-test-legacy-$$NEW_VERSION && helm uninstall ci-test-legacy-$$NEW_VERSION && sleep 10
      - BRANCH=$(git rev-parse --short HEAD)
      - git checkout master
      - echo "installing old helm chart on staging"
      - helm install ci-test-legacy-$$NEW_VERSION charts/k8s-watcher --set apiKey=$$STAGING_API_KEY --set watcher.clusterName=ci-test-$$NEW_VERSION --set imagePullSecret=docker-cfg-komodorio --set namespace=ci-test-legacy-namespace-$$NEW_VERSION --set communications.serverHost=https://staging.app.komodor.com --set communications.tasksServerHost=https://staging.app.komodor.com --set communications.wsHost=wss://staging.app.komodor.com --set capabilities.telemetry.enable=false --set communications.telemetryServerHost=https://staging.telemetry.komodor.com --set allowedResources.secret=true --set capabilities.event.redact="{.*KEY.*,.*key.*,.*BUGSNAG.*}"
      - git checkout $$BRANCH
      - echo "upgrade to new helm chart on staging"
      - helm upgrade --install ci-test-legacy-$$NEW_VERSION charts/k8s-watcher --set apiKey=$$STAGING_API_KEY --set watcher.clusterName=ci-test-legacy-$$NEW_VERSION --set imagePullSecret=docker-cfg-komodorio --set namespace=ci-test-legacy-namespace-$$NEW_VERSION --set supervisor.enabled=true --set watcher.serverHost=https://staging.app.komodor.com --set watcher.tasksServerHost=https://staging.app.komodor.com --set watcher.wsHost=wss://staging.app.komodor.com --set watcher.telemetry.enable=false --set watcher.telemetry.serverHost=https://staging.telemetry.komodor.com --set watcher.collectHistory=true --set watcher.nameDenylist="{leader,election}" --set watcher.resources.secret=true --set watcher.redact="{.*KEY.*,.*key.*,.*BUGSNAG.*}" --set watcher.enableAgentTaskExecution=true --set watcher.enableAgentTaskExecutionV2=true --set watcher.allowReadingPodLogs=true --set watcher.actions.basic=true --set watcher.actions.advanced=true --set watcher.enableHelm=true --set helm.enableActions=true --set watcher.actions.podExec=true --set metrics.enabled=true --set watcher.actions.portforward=true --set watcher.networkMapper.enable=false
      - helm uninstall ci-test-legacy-$$NEW_VERSION
    agents:
      builder: "dind"
    plugins:
      - zacharymctague/aws-ssm#v1.0.0:
          parameters:
            STAGING_API_KEY: /komodor/staging/komodor-agent-chart/api-key

  - label: ":weight_lifter: test helm update install"
    commands:
      - CURRENT_VERSION=$(cat charts/komodor-agent/Chart.yaml | grep 'version:' | awk '{print \$2}' | awk '{ gsub("\\.", "-"); print }')
      - NEW_VERSION=$(echo $$CURRENT_VERSION | awk -F- '{\$NF = \$NF + 1;} 1' | sed 's/ /-/g')
      - NAMESPACE=ci-test-namespace-$$NEW_VERSION
      - CHART_NAME=ci-test-$$NEW_VERSION
      - komo ctx staging
      - helm status -n $$NAMESPACE $$CHART_NAME && helm uninstall $$CHART_NAME -n $$NAMESPACE && sleep 10
      - BRANCH=$(git rev-parse --short HEAD)
      # TODO: REMOVE  << - git checkout master
      - echo "installing old helm chart on staging"
      - helm install $$CHART_NAME charts/komodor-agent --set clusterName=$$CHART_NAME --set imagePullSecret=docker-cfg-komodorio --namespace=$$NAMESPACE --create-namespace --set communications.serverHost=https://staging.app.komodor.com --set communications.tasksServerHost=https://staging.app.komodor.com --set communications.wsHost=wss://staging.app.komodor.com --set capabilities.telemetry.enable=false --set communications.telemetryServerHost=https://staging.telemetry.komodor.com --set apiKey=$$KOMODOR_AGENT_STAGING_API_KEY --set allowedResources.secret=true --set capabilities.event.redact="{.*KEY.*,.*key.*,.*BUGSNAG.*}"
      - git checkout $$BRANCH
      - echo "upgrade to new helm chart on staging"
      - helm get values $$CHART_NAME -n $$NAMESPACE > old-values.yaml && helm upgrade --install $$CHART_NAME charts/komodor-agent -n $$NAMESPACE -f old-values.yaml
      - helm uninstall $$CHART_NAME -n $$NAMESPACE
      - kubectl delete namespace $$NAMESPACE
    agents:
      builder: "dind"
    plugins:
      - zacharymctague/aws-ssm#v1.0.0:
          parameters:
            KOMODOR_AGENT_STAGING_API_KEY: /komodor/staging/komodor-agent-chart/api-key

    if: build.message !~ /feat\(OSS.+\):/i && build.branch != "master"
  - wait

  - block: ":infinity: Bump Versions"
    if: build.message !~ /feat\(OSS.+\):/i && build.branch == "master"
  - commands:
      - "git config user.email buildkite@users.noreply.github.com"
      - "git config user.name buildkite"
      - git fetch --tags
      # TODO: REMOVE  << - git checkout master
      - git checkout -b bump-versions-test
      - CHART=k8s-watcher
      - APP_VERSION=$(buildkite-agent meta-data get "version" --job ${PARENT_JOB_ID}) || APP_VERSION=$(cat charts/$$CHART/Chart.yaml | grep 'appVersion:' | awk '{print \$2}')
      - echo "Updating app version to $$APP_VERSION"
      - 'sed -i -e "s/appVersion.*/appVersion: $$APP_VERSION/g" charts/$$CHART/Chart.yaml'
      - 'buildkite-agent meta-data set "agent-version" "$$APP_VERSION"'
      - CURRENT_VERSION=$(cat charts/$$CHART/Chart.yaml | grep 'version:' | awk '{print \$2}')
      - NEW_VERSION=$(echo $$CURRENT_VERSION | awk -F. '{\$NF = \$NF + 1;} 1' | sed 's/ /./g')
      - echo "Updating chart '$$CHART' version from $$CURRENT_VERSION to $$NEW_VERSION"
      - 'sed -i -e "s/$$CURRENT_VERSION/$$NEW_VERSION/g" charts/$$CHART/Chart.yaml'
      - "git add charts/$$CHART/Chart.yaml"
      - 'buildkite-agent meta-data set "$$CHART-version" "$$NEW_VERSION"'

      - CHART=komodor-agent
      - APP_VERSION=$(buildkite-agent meta-data get "version" --job ${PARENT_JOB_ID}) || APP_VERSION=$(cat charts/$$CHART/Chart.yaml | grep 'appVersion:' | awk '{print \$2}')
      - echo "Updating app version to $$APP_VERSION"
      - 'sed -i -e "s/appVersion.*/appVersion: $$APP_VERSION/g" charts/$$CHART/Chart.yaml'
      - 'buildkite-agent meta-data set "agent-version" "$$APP_VERSION"'
      - CURRENT_VERSION=$(cat charts/$$CHART/Chart.yaml | grep 'version:' | awk '{print \$2}')
      - NEW_VERSION=$(echo $$CURRENT_VERSION | awk -F. '{\$NF = \$NF + 1;} 1' | sed 's/ /./g')
      - echo "Updating chart '$$CHART' version from $$CURRENT_VERSION to $$NEW_VERSION"
      - 'sed -i -e "s/$$CURRENT_VERSION/$$NEW_VERSION/g" charts/$$CHART/Chart.yaml'
      - "git add charts/$$CHART/Chart.yaml"
      - 'buildkite-agent meta-data set "$$CHART-version" "$$NEW_VERSION"'

      - echo "Update readme"
      - pushd charts/komodor-agent && make generate-readme && popd
      - git add charts/komodor-agent/README.md || echo "Nothing to add"

      - 'git commit -m "[skip ci] increment chart versions" || echo "Already up-to-date"'
      - 'git push -f || echo "Nothing to push!"'
    agents:
      builder: "dind"
    label: Bump Versions
    key: bump-versions
    # TODO: REMOVE  << if: build.message !~ /feat\(OSS.+\):/i && build.branch == "master"
  - wait

  - block: ":rocket: release helm chart"
    if: build.message !~ /feat\(OSS.+\):/i && build.branch == "master"
  - label: Publish Helm charts to Github Pages
    env:
      - GITHUB_PAGES_REPO: "komodorio/helm-charts"
      - BRANCH: $BUILDKITE_BRANCH
    commands:
      - "git config user.email buildkite@users.noreply.github.com"
      - "git config user.name buildkite"
      - "git checkout master"
      - LEGACY_NEW_VERSION=$(buildkite-agent meta-data get "k8s-watcher-version")
      - NEW_VERSION=$(buildkite-agent meta-data get "komodor-agent-version")
      - APP_VERSION=$(buildkite-agent meta-data get "agent-version")
      - 'sed -i -e "s/version.*/version: $$LEGACY_NEW_VERSION/g" charts/k8s-watcher/Chart.yaml'
      - 'sed -i -e "s/version.*/version: $$NEW_VERSION/g" charts/komodor-agent/Chart.yaml'
      - make generate-kube

      - "git add charts/k8s-watcher"
      - "git add charts/komodor-agent"
      - "git status"
      - 'git commit -m "[skip ci] update generated manifests" && git tag $$NEW_VERSION || echo "Already up-to-date"'
      - 'git push -f && git push --tags || echo "Nothing to push!"'
      - "GITHUB_PAGES_REPO=komodorio/helm-charts sh publish.sh"
    agents:
      builder: "dind"
    if: build.message !~ /feat\(OSS.+\):/i && build.branch == "master"
  - wait

  - label: ":eyeglasses: LEGACY: validate helm chart version updated"
    commands:
      - python3 ./.buildkite/validate_helm_chart_updated.py "k8s-watcher"
    agents:
      builder: "dind"
    if: build.message !~ /feat\(OSS.+\):/i && build.branch == "master"

  - label: ":eyeglasses: validate helm chart version updated"
    commands:
      - python3 ./.buildkite/validate_helm_chart_updated.py "komodor-agent"
    agents:
      builder: "dind"
    if: build.message !~ /feat\(OSS.+\):/i && build.branch == "master"
  - wait

  - label: ":magic_wand: Install new komodor-agent version on komodor staging :kubernetes: cluster"
    commands:
      - komo ctx staging
      - helm repo add komodorio https://helm-charts.komodor.io
      - helm repo update
      - helm get values komodor-agent-staging > staging-values.yaml
      - helm upgrade --install komodor-agent-staging komodorio/komodor-agent -f staging-values.yaml --dry-run
      - helm upgrade --install komodor-agent-staging komodorio/komodor-agent -f staging-values.yaml --set clusterName=komodor-staging-eks --namespace=komodor-staging --set imagePullSecret=docker-cfg-komodorio --set communications.serverHost=https://staging.app.komodor.com --set communications.tasksServerHost=https://staging.app.komodor.com --set communications.wsHost=wss://staging.app.komodor.com --set capabilities.telemetry.enable=false --set communications.telemetryServerHost=https://staging.telemetry.komodor.com --set apiKey=$$KOMODOR_AGENT_STAGING_API_KEY --set allowedResources.secret=true --set capabilities.event.redact="{.*KEY.*,.*key.*,.*BUGSNAG.*}"

      - helm get values komodor-agent-production > production-values.yaml
      - helm upgrade --install komodor-agent-production  komodorio/komodor-agent -f production-values.yaml  --dry-run
      - helm upgrade --install komodor-agent-production komodorio/komodor-agent --set clusterName=komodor-staging --set apiKey=$$KOMODOR_AGENT_STAGING_API_KEY --set imagePullSecret=docker-cfg-komodorio --set allowedResources.secret=true --set capabilities.event.redact="{.*KEY.*,.*key.*,.*BUGSNAG.*}" --set tags="env:staging-on-prod"
    agents:
      builder: "dind"
    plugins:
      - zacharymctague/aws-ssm#v1.0.0:
          parameters:
            KOMODOR_AGENT_STAGING_API_KEY: /komodor/staging/komodor-agent-chart/api-key
            STAGING_PRODUCTION_API_KEY: /komodor/staging/kubernetes/prod-agent-api-key

    if: build.message !~ /feat\(OSS.+\):/i && build.branch == "master"

  - label: ":magic_wand: Install new komodor-agent version on komodor production :kubernetes: cluster"
    commands:
      - komo ctx production
      - helm repo add komodorio https://helm-charts.komodor.io
      - helm repo update
      - helm get values komodor-agent > production-values.yaml
      - helm upgrade --install komodor-agent komodorio/komodor-agent -f production-values.yaml --set apiKey=$$API_KEY --dry-run
      - helm upgrade --install komodor-agent komodorio/komodor-agent --set clusterName=production --set apiKey=$$API_KEY --set imagePullSecret=docker-cfg-komodorio --set allowedResources.secret=true --set capabilities.event.redact="{.*KEY.*,.*key.*,.*BUGSNAG.*}" --set tags="env:production"
    agents:
      builder: "dind"
    plugins:
      - zacharymctague/aws-ssm#v1.0.0:
          parameters:
            API_KEY: /komodor/production/kubernetes/api-key
    if: build.message !~ /feat\(OSS.+\):/i && build.branch == "master"

  - label: ":magic_wand: Install new watcher version on komodor ci :kubernetes: cluster"
    commands:
      - komo ctx ci
      - helm repo add komodorio https://helm-charts.komodor.io
      - helm repo update
      - helm get values komodor-agent > ci-values.yaml
      - helm upgrade --install komodor-agent komodorio/komodor-agent --set apiKey=$$API_KEY -f ci-values.yaml --dry-run
      - helm upgrade --install komodor-agent komodorio/komodor-agent --set clusterName=buildkite-cluster --set apiKey=$$API_KEY --set imagePullSecret=docker-cfg-komodorio --set allowedResources.secret=true --set capabilities.event.redact="{.*KEY.*,.*key.*,.*BUGSNAG.*}" --set tags="env:ci"
    agents:
      builder: "dind"
    plugins:
      - zacharymctague/aws-ssm#v1.0.0:
          parameters:
            API_KEY: /komodor/ci/kubernetes/agent-api-key
    if: build.message !~ /feat\(OSS.+\):/i && build.branch == "master"
