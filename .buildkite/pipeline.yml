steps:
  - command: helm template k8s-watcher charts/k8s-watcher -f charts/k8s-watcher/values.yaml --set apiKey="sanity" --set metrics.enabled=true --set watcher.clusterName=test-template
    agents:
      builder: "dind"
    label: "helm template check for sanity"
    if: build.message !~ /feat\(OSS.+\):/i
  - wait

  - commands:
      - komo ctx staging
      - helm upgrade --install k8s-watcher-production --reuse-values --dry-run charts/k8s-watcher --set apiKey="test" --set watcher.clusterName=staging-test
    label: "dry-run installation on staging before version bump"
    if: build.message !~ /feat\(OSS.+\):/i
  - wait

  - block: "Bump Versions"
    if: build.message !~ /feat\(OSS.+\):/i && build.branch == "master"
  - commands:
      - "git config user.email buildkite@users.noreply.github.com"
      - "git config user.name buildkite"
      - git fetch --tags
      - git checkout master
      - APP_VERSION=$(buildkite-agent meta-data get "version" --job ${PARENT_JOB_ID}) || APP_VERSION=$(cat charts/k8s-watcher/Chart.yaml | grep 'appVersion:' | awk '{print \$2}')
      - echo "Updating app version to $$APP_VERSION"
      - 'sed -i -e "s/appVersion.*/appVersion: $$APP_VERSION/g" charts/k8s-watcher/Chart.yaml'
      - 'buildkite-agent meta-data set "agent-version" "$$APP_VERSION"'
      - CURRENT_VERSION=$(cat charts/k8s-watcher/Chart.yaml | grep 'version:' | awk '{print \$2}')
      - NEW_VERSION=$(echo $$CURRENT_VERSION | awk -F. '{\$NF = \$NF + 1;} 1' | sed 's/ /./g')
      - echo "Updating chart version from $$CURRENT_VERSION to $$NEW_VERSION"
      - 'sed -i -e "s/$$CURRENT_VERSION/$$NEW_VERSION/g" charts/k8s-watcher/Chart.yaml'
      - 'buildkite-agent meta-data set "version" "$$NEW_VERSION"'
      - "git add charts/k8s-watcher/Chart.yaml"
      - 'git commit -m "[skip ci] increment chart versions" || echo "Already up-to-date"'
      - 'git push -f || echo "Nothing to push!"'
    agents:
      builder: "dind"
    label: Bump Versions
    key: bump-versions
    if: build.message !~ /feat\(OSS.+\):/i && build.branch == "master"
  - wait

  - block: "release helm chart"
    if: build.message !~ /feat\(OSS.+\):/i && build.branch == "master"
  - label: Publish Helm charts to Github Pages
    env:
      - GITHUB_PAGES_REPO: "komodorio/helm-charts"
      - BRANCH: $BUILDKITE_BRANCH
    commands:
      - "git config user.email buildkite@users.noreply.github.com"
      - "git config user.name buildkite"
      - "git checkout master"
      - NEW_VERSION=$(buildkite-agent meta-data get "version")
      - APP_VERSION=$(buildkite-agent meta-data get "agent-version")
      - 'sed -i -e "s/version.*/version: $$NEW_VERSION/g" charts/k8s-watcher/Chart.yaml'
      - make generate-kube
      - cd manifests/base
      - kustomize edit set image komodorio/k8s-watcher=komodorio/k8s-watcher:$$APP_VERSION
      - kustomize edit set label app.kubernetes.io/watcher-version:$$APP_VERSION
      - cd ../..
      - "git add manifests && git add charts/k8s-watcher"
      - "git status"
      - 'git commit -m "[skip ci] update generated manifests" && git tag $$NEW_VERSION || echo "Already up-to-date"'
      - 'git push -f && git push --tags || echo "Nothing to push!"'
      - "GITHUB_PAGES_REPO=komodorio/helm-charts sh publish.sh"
    agents:
      builder: "dind"
    if: build.message !~ /feat\(OSS.+\):/i && build.branch == "master"
    depends_on: "bump-versions"
  - wait

  - commands:
      - python3 ./.buildkite/validate_helm_chart_updated.py
    agents:
      builder: "dind"
    if: build.message !~ /feat\(OSS.+\):/i && build.branch == "master"
    label: "validate helm chart version updated"
  - wait

  - commands:
      - komo ctx staging
      - helm repo add komodorio https://helm-charts.komodor.io
      - helm repo update
      - helm upgrade --install k8s-watcher-staging komodorio/k8s-watcher --set apiKey=$$STAGING_API_KEY --reuse-values --dry-run
      - helm upgrade --install k8s-watcher-staging komodorio/k8s-watcher --set watcher.clusterName=komodor-staging-eks --set imagePullSecret=docker-cfg-komodorio --set namespace=komodor-staging --set supervisor.enabled=true --set watcher.serverHost=https://staging.app.komodor.com --set watcher.tasksServerHost=https://staging.app.komodor.com --set watcher.wsHost=wss://staging.app.komodor.com --set watcher.telemetry.enable=false --set watcher.telemetry.serverHost=https://staging.telemetry.komodor.com --set apiKey=$$STAGING_API_KEY --set watcher.collectHistory=true --set watcher.nameDenylist="{leader,election}" --set watcher.resources.secret=true --set watcher.redact="{.*KEY.*,.*key.*,.*BUGSNAG.*}" --set watcher.enableAgentTaskExecution=true --set watcher.enableAgentTaskExecutionV2=true --set watcher.allowReadingPodLogs=true --set watcher.actions.basic=true --set watcher.actions.advanced=true --set watcher.enableHelm=true --set helm.enableActions=true --set watcher.actions.podExec=true --set metrics.enabled=true --set watcher.actions.portforward=true --set watcher.networkMapper.enable=true
      - helm upgrade --install k8s-watcher-production  komodorio/k8s-watcher --set apiKey=$$STAGING_PRODUCTION_API_KEY  --reuse-values --dry-run
      - helm upgrade --install k8s-watcher-production komodorio/k8s-watcher --set watcher.clusterName=komodor-staging-eks --set apiKey=$$STAGING_PRODUCTION_API_KEY --set imagePullSecret=docker-cfg-komodorio --set supervisor.enabled=true --set watcher.telemetry.enable=true --set watcher.collectHistory=true --set watcher.nameDenylist="{leader,election}" --set watcher.resources.secret=true --set watcher.redact="{.*KEY.*,.*key.*,.*BUGSNAG.*}" --set watcher.enableAgentTaskExecution=true --set watcher.enableAgentTaskExecutionV2=true --set watcher.allowReadingPodLogs=true --set watcher.actions.basic=true --set watcher.actions.advanced=true --set watcher.enableHelm=true --set helm.enableActions=true --set watcher.actions.podExec=true --set metrics.enabled=true  --set watcher.actions.portforward=true --set watcher.networkMapper.enable=true
    agents:
      builder: "dind"
    plugins:
      - zacharymctague/aws-ssm#v1.0.0:
          parameters:
            STAGING_API_KEY: /komodor/staging/kubernetes/agent-api-key
            STAGING_PRODUCTION_API_KEY: /komodor/staging/kubernetes/prod-agent-api-key
    label: "Install new watcher version on komodor staging :kubernetes: cluster"
    if: build.message !~ /feat\(OSS.+\):/i && build.branch == "master"

  - commands:
      - komo ctx production
      - helm repo add komodorio https://helm-charts.komodor.io
      - helm repo update
      - helm upgrade --install k8s-watcher komodorio/k8s-watcher --set apiKey=$$API_KEY --reuse-values --dry-run
      - helm upgrade --install k8s-watcher komodorio/k8s-watcher --set watcher.clusterName=production --set apiKey=$$API_KEY --set imagePullSecret=docker-cfg-komodorio --set watcher.telemetry.enable=true --set supervisor.enabled=true --set watcher.collectHistory=true --set watcher.nameDenylist="{leader,election}" --set watcher.resources.secret=true --set watcher.redact="{.*KEY.*,.*key.*,.*BUGSNAG.*}" --set watcher.enableAgentTaskExecution=true --set watcher.enableAgentTaskExecutionV2=true --set watcher.allowReadingPodLogs=true --set watcher.actions.basic=true --set watcher.actions.advanced=true --set watcher.enableHelm=true --set helm.enableActions=true --set watcher.actions.podExec=true --set metrics.enabled=true  --set watcher.actions.portforward=true --set watcher.networkMapper.enable=true
    agents:
      builder: "dind"
    plugins:
      - zacharymctague/aws-ssm#v1.0.0:
          parameters:
            API_KEY: /komodor/production/kubernetes/api-key
    label: "Install new watcher version on komodor production :kubernetes: cluster"
    if: build.message !~ /feat\(OSS.+\):/i && build.branch == "master"

  - commands:
      - komo ctx ci
      - helm repo add komodorio https://helm-charts.komodor.io
      - helm repo update
      - helm upgrade --install k8s-watcher komodorio/k8s-watcher --set apiKey=$$API_KEY --reuse-values --dry-run
      - helm upgrade --install k8s-watcher komodorio/k8s-watcher --set watcher.clusterName=buildkite-cluster --set apiKey=$$API_KEY --set imagePullSecret=docker-cfg-komodorio --set watcher.telemetry.enable=true --set supervisor.enabled=true --set watcher.collectHistory=true --set watcher.nameDenylist="{leader,election}" --set watcher.resources.secret=true --set watcher.redact="{.*KEY.*,.*key.*,.*BUGSNAG.*}" --set watcher.enableAgentTaskExecution=true --set watcher.enableAgentTaskExecutionV2=true --set watcher.allowReadingPodLogs=true --set watcher.actions.basic=true --set watcher.actions.advanced=true --set watcher.enableHelm=true --set helm.enableActions=true --set watcher.actions.podExec=true --set metrics.enabled=true  --set watcher.actions.portforward=true
    agents:
      builder: "dind"
    plugins:
      - zacharymctague/aws-ssm#v1.0.0:
          parameters:
            API_KEY: /komodor/ci/kubernetes/agent-api-key
    label: "Install new watcher version on komodor ci :kubernetes: cluster"
    if: build.message !~ /feat\(OSS.+\):/i && build.branch == "master"
