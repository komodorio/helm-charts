from unittest.mock import patch, Mock, mock_open
import datetime
import json

import pytest

from main import (
    filter_out_excluded_cves,
    extract_images,
    _get_value_from_yaml_file,
    process_results,
    scan
)

EMPTY_EXCLUDE_CVES = []

EXCLUDE_CVES = [
    {
        'SystemPath': '/usr/bin/pluto',
        'CVEs': ['CVE-2023-24540'],
        'MuteUntil': datetime.date(2050, 1, 1)
    },
]

SAMPLE_VULNERABILITIES = [
    {
        'SystemPath': '/usr/bin/pluto',
        'VulnerabilityID': 'CVE-2023-24540',

    },
    {
        'SystemPath': '/usr/bin/pluto',
        'VulnerabilityID': 'CVE-2023-0000',

    },

]

SAMPLE_SCAN_RESULT = { "securityFindings": {
    "vulnerabilities": [
      {
        "target": "GO",
        "class": "lang_pkgs",
        "type": "/usr/bin/pluto",
        "vulnerabilities": [
          {
            "VulnerabilityID": "CVE-2023-24540",
            "PkgName": "go",
            "SourcePkgName": "go",
            "InstalledVersion": "1.20.4",
            "Layer": {
              "DiffID": "sha256:629027f2c6893a6f7163591df8df2f9eba9c792a6f96be1ce35540f120ce2bf2"
            },
            "PrimaryURL": "https://www.mend.io/vulnerability-database/CVE-2023-24540",
            "Description": "Not all valid JavaScript whitespace characters are considered to be whitespace. Templates containing whitespace characters outside of the character set \"\\t\\n\\f\\r\\u0020\\u2028\\u2029\" in JavaScript contexts that also contain actions may not be properly sanitized during execution.",
            "Severity": "CRITICAL",
            "PublishedDate": "2023-05-11 16:15:00 +0000 +0000",
            "LastModifiedDate": "2023-05-22 18:22:00 +0000 +0000",
            "score": 9.8,
            "CVSS": {
              "V3Score": 9.8,
              "V3Vector": "CVSS:3.1/AV:N/AC:L/PR:N/UI:N/S:U/C:H/I:H/A:H"
            },
            "References": [
              "https://access.redhat.com/errata/RHSA-2023:3318"
            ],
            "FixedVersion": "1.20.4-r0",
            "SystemPath": "/usr/bin/pluto",
            "FileName": "pluto"
          },
          {
            "VulnerabilityID": "CVE-2023-29402",
            "PkgName": "go",
            "SourcePkgName": "go",
            "InstalledVersion": "1.20.4",
            "Layer": {
              "DiffID": "sha256:629027f2c6893a6f7163591df8df2f9eba9c792a6f96be1ce35540f120ce2bf2"
            },
            "PrimaryURL": "https://www.mend.io/vulnerability-database/CVE-2023-29402",
            "Description": "The go command may generate unexpected code at build time when using cgo. This may result in unexpected behavior when running a go program which uses cgo. This may occur when running an untrusted module which contains directories with newline characters in their names. Modules which are retrieved using the go command, i.e. via \"go get\", are not affected (modules retrieved using GOPATH-mode, i.e. GO111MODULE=off, may be affected).",
            "Severity": "CRITICAL",
            "PublishedDate": "2023-06-08 21:15:00 +0000 +0000",
            "LastModifiedDate": "2023-08-11 03:15:00 +0000 +0000",
            "score": 9.8,
            "CVSS": {
              "V3Score": 9.8,
              "V3Vector": "CVSS:3.1/AV:N/AC:L/PR:N/UI:N/S:U/C:H/I:H/A:H"
            },
            "References": [
              "https://access.redhat.com/errata/RHSA-2023:3923"
            ],
            "FixedVersion": "1.20.5-r0",
            "SystemPath": "/usr/bin/pluto",
            "FileName": "pluto"
          }
      ]
    }
    ]
    }
}

SAMPLE_VALUES_YAML = """
imageRepo: public.ecr.aws/komodor-public
apple:
    init:
        image:
            name: apple-init
            tag: 0.0.1
banana:
    image:
        name: banana
        tag: 0.0.2
"""


@pytest.mark.parametrize(
    'excluded_cves, expected_result',
    [
        (EMPTY_EXCLUDE_CVES, 2),
        (EXCLUDE_CVES, 1)
    ]
)
def test_filter_out_excluded_cves(excluded_cves, expected_result):
    # Ensure the function filters out excluded CVEs
    with patch('main.EXCLUDE_CVES', excluded_cves):
        filtered_vulnerabilities = filter_out_excluded_cves(SAMPLE_VULNERABILITIES)
        assert len(filtered_vulnerabilities) == expected_result


def test_extract_images():
    # Ensure the function extracts images correctly
    app_version = '1.0'
    chart_file = 'path/to/Chart.yaml'
    expected_images = ['apple-init:0.0.1', 'banana:0.0.2']
    with patch('builtins.open', mock_open(read_data=SAMPLE_VALUES_YAML)):
        images = extract_images('values.yaml', app_version)
        assert images == expected_images


def test_get_app_version():
    # Ensure the function retrieves the app version correctly
    expected_version = '1.0.0'
    with patch('builtins.open', mock_open(read_data='appVersion: 1.0.0')):
        version = _get_value_from_yaml_file('Chart.yaml', 'appVersion')
        assert version == expected_version


def test_process_results():
    # Ensure the function processes scan results correctly
    with patch('main.EXCLUDE_CVES', EXCLUDE_CVES):
        v_count, vulnerabilities = process_results(SAMPLE_SCAN_RESULT)
        assert v_count == 1
        assert vulnerabilities


def test_scan():
    # Ensure the scan function handles a successful scan
    with patch('subprocess.Popen') as mock_popen:
        mock_process = Mock()
        mock_process.communicate.return_value = (json.dumps(SAMPLE_SCAN_RESULT), b'')
        mock_process.returncode = 0
        mock_popen.return_value = mock_process
        max_retries = 3
        retry_interval = 5
        timeout = 30
        image_url = 'sample_image_url'
        count, results = scan(image_url, max_retries, retry_interval, timeout)
        assert count == 1
        assert results


if __name__ == "__main__":
    test_filter_out_excluded_cves()
    test_extract_images()
    test_get_app_version()
    test_process_results()
    test_scan()

