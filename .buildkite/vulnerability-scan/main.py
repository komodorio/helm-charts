import sys
import os
import yaml
import subprocess
import json
import time
import datetime
from prettytable import PrettyTable

EXCLUDE_CVES = []

class Vulnerability(object):
    COLUMNS = ['VulnerabilityID', 'Severity', 'InstalledVersion', 'FixedVersion', 'PrimaryURL']

    def __init__(self, data):
        self.details = data

    def __str__(self):
        table = PrettyTable(self.COLUMNS)
        for v in self.details['vulnerabilities']:
            table.add_row([v.get(c, '') for c in self.COLUMNS])
        return f"{self.details['target']} {self.details['type']}\n{table}\n"


def _get_value_from_yaml_file(values_file, path):
    with open(values_file, 'r') as f:
        data = yaml.safe_load(f)
    for key in path.split('.'):
        data = data.get(key, None)
        if data is None:
            return None
    return data


def find_images(data, app_version):
    images = []
    if isinstance(data, dict):
        for value in data.values():
            if isinstance(value, dict) and 'image' in value:
                name = value['image'].get("name")
                tag = value['image'].get("tag") or app_version
                if name:
                    images.append(f'{name}:{tag}')
            images.extend(find_images(value, app_version))
    elif isinstance(data, list):
        for item in data:
            images.extend(find_images(item, app_version))
    return images


def extract_images(values_file, app_version):
    with open(values_file, 'r') as f:
        data = yaml.safe_load(f)
    return find_images(data, app_version)


def load_excluded_cves():
    with open(os.path.join(os.path.dirname(__file__), "exclude.yaml"), 'r') as f:
        data = yaml.safe_load(f)
    global EXCLUDE_CVES
    EXCLUDE_CVES = data.get('exclusions', None)


def filter_out_excluded_cves(vulnerabilities):
    current_date = datetime.date.today()
    filtered_vulnerabilities = []

    for vulnerability in vulnerabilities:
        if not any(
            (("SystemPath" in vulnerability and exclusion['SystemPath'] == vulnerability['SystemPath'])
             or 'PkgName' == exclusion['SystemPath'])
            and vulnerability['VulnerabilityID'] in exclusion['CVEs']
            and current_date <= exclusion.get('MuteUntil', current_date)
            for exclusion in EXCLUDE_CVES
        ):
            filtered_vulnerabilities.append(vulnerability)

    return filtered_vulnerabilities


def process_results(results):
    v_count = 0
    vulnerabilities = []
    for v in results['securityFindings']['vulnerabilities']:
        vulnerabilities_with_fix = [item for item in v['vulnerabilities'] if 'FixedVersion' in item]
        vulnerabilities_to_report = filter_out_excluded_cves(vulnerabilities_with_fix)
        if vulnerabilities_to_report:
            v_count += len(vulnerabilities_to_report)
            v['vulnerabilities'] = vulnerabilities_to_report
            vulnerabilities.append(Vulnerability(v))
    return v_count, vulnerabilities


def scan(image_url, max_retries=3, retry_interval=5, timeout=30):
    for retry in range(max_retries):
        try:
            cmd = ['mend', 'image', image_url, '--filter', 'critical', '--format', 'json']
            process = subprocess.Popen(cmd, stdout=subprocess.PIPE, stderr=subprocess.PIPE)
            try:
                output, err = process.communicate(timeout=timeout)
            except subprocess.TimeoutExpired:
                process.kill()
                output, err = process.communicate()
                print(f"Scan timed out for image {image_url}, retrying ({retry + 1}/{max_retries})...")
                time.sleep(retry_interval)
                continue

            if process.returncode != 0:
                print(f"Error scanning image {image_url}, ({retry + 1}/{max_retries})\n\toutput: {output}, \n\terror: {err}")

            output = json.loads(output)
            return process_results(output)
        except Exception as e:
            print(f"Error scanning image {image_url}: {e} ({retry + 1}/{max_retries})")

    print(f"Max retries reached for image {image_url}")
    return 1, [Vulnerability({'target': image_url, 'type': 'scan error', 'vulnerabilities': []})]


if __name__ == "__main__":
    chart_dir = 'charts/komodor-agent'
    app_version = _get_value_from_yaml_file(f'{chart_dir}/Chart.yaml', 'appVersion')
    image_repo = _get_value_from_yaml_file(f'{chart_dir}/values.yaml', 'imageRepo')
    images = extract_images(f'{chart_dir}/values.yaml', app_version)
    load_excluded_cves()

    scan_result = {}
    total_vulnerabilities = 0

    for image in images:
        print(f"Scanning image {image}")
        full_image_url = f'{image_repo}/{image}'
        count, results = scan(full_image_url)
        total_vulnerabilities += count
        scan_result[image] = results

    if total_vulnerabilities > 0:
        print(f"Found {total_vulnerabilities} vulnerabilities")
        for image, results in scan_result.items():
            if results:
                print(f"Vulnerabilities for {image}")
                for v in results:
                    print(v)
        sys.exit(1)

    print("No vulnerabilities found")
