import sys
import yaml
import subprocess
import json
import time
from prettytable import PrettyTable


class Vulnerability(object):
    COLUMNS = ['VulnerabilityID', 'Severity', 'InstalledVersion', 'FixedVersion']

    def __init__(self, data):
        self.details = data

    def show(self):
        print(f"{self.details['target']} {self.details['type']}")
        table = PrettyTable(self.COLUMNS)
        for v in self.details['vulnerabilities']:
            table.add_row([v.get(c, '') for c in self.COLUMNS])
        print(table)
        print('\n')


def _find_images(data, app_version, path=None):
    images = []
    if path is None:
        path = []

    if isinstance(data, dict):
        for key, value in data.items():
            new_path = path + [key]
            if key == "image" and isinstance(value, dict):
                name = value.get("name")
                if not name:
                    continue
                tag = value.get("tag")
                if not tag:
                    tag = app_version
                images.append(f'{name}:{tag}')
            images.extend(_find_images(value, app_version, new_path))
    elif isinstance(data, list):
        for item in data:
            images.extend(_find_images(item, app_version, path))

    return images


def _extract_images(values_file, app_version):
    with open(values_file, 'r') as f:
        data = yaml.safe_load(f)
    return _find_images(data, app_version)


def _get_app_version(chart_file):
    with open(chart_file, 'r') as f:
        data = yaml.safe_load(f)
    return data.get('appVersion', None)


def _get_value_from_helm_values(values_file, path):
    with open(values_file, 'r') as f:
        data = yaml.safe_load(f)
    for key in path.split('.'):
        data = data.get(key, None)
        if data is None:
            return None
    return data


def _process_results(results):
    v_count = 0
    vulnerabilities = []
    for v in results['securityFindings']['vulnerabilities']:
        filtered_list = [item for item in v['vulnerabilities'] if 'FixedVersion' in item]
        if len(filtered_list) == 0:
            continue
        v['vulnerabilities'] = filtered_list
        v_count += len(filtered_list)
        vulnerabilities.append(Vulnerability(v))

    return v_count, vulnerabilities


def scan(image_url, max_retries=3, retry_interval=5, timeout=30):
    for retry in range(max_retries):
        try:
            cmd = ['mend', 'image', image_url, '--filter', 'critical', '--format', 'json']
            process = subprocess.Popen(cmd, stdout=subprocess.PIPE, stderr=subprocess.PIPE)
            try:
                output, err = process.communicate(timeout=timeout)
            except subprocess.TimeoutExpired:
                process.kill()
                output, err = process.communicate()
                print(f"Scan timed out for image {image_url}, retrying ({retry + 1}/{max_retries})...")
                time.sleep(retry_interval)
                continue

            if process.returncode != 0:
                print(f"Error scanning image {image_url}")
                print(err.decode('utf-8'))
                return 1, [Vulnerability({'target': image_url, 'type': 'scan error', 'vulnerabilities': []})]

            output = json.loads(output)
            return _process_results(output)
        except Exception as e:
            print(f"Error scanning image {image_url}: {e}")
            return 1, [Vulnerability({'target': image_url, 'type': 'scan error', 'vulnerabilities': []})]

    print(f"Max retries reached for image {image_url}")
    return 1, [Vulnerability({'target': image_url, 'type': 'scan error', 'vulnerabilities': []})]


# Usage:
chart_dir = 'charts/komodor-agent'
app_version = _get_app_version(f'{chart_dir}/Chart.yaml')
image_repo = _get_value_from_helm_values(f'{chart_dir}/values.yaml', 'imageRepo')
images = _extract_images(f'{chart_dir}/values.yaml', app_version)

# steps = ""
scan_result = {}
total_vulnerabilities = 0
for image in images:
    print(f"Scanning image {image}")
    full_image_url = f'{image_repo}/{image}'
    count, results = scan(full_image_url)
    total_vulnerabilities += count
    scan_result[image] = results


if total_vulnerabilities > 0:
    print(f"Found {total_vulnerabilities} vulnerabilities")
    for image, results in scan_result.items():
        if len(results) == 0:
            continue
        print(f"Vulnerabilities for {image}")
        for v in results:
            print(v.show())
    sys.exit(1)


print("No vulnerabilities found")
